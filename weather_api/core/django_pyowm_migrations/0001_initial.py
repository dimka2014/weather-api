# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-28 11:19
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='COIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_time', models.DateTimeField(help_text='Reference time', verbose_name='Time the observation refers to')),
                ('interval', models.CharField(choices=[('minute', 'One minute'), ('hour', 'One hour'), ('day', 'One day'), ('month', 'One month'), ('year', 'One year')], max_length=255, verbose_name='Time granularity of the observation')),
                ('reception_time', models.DateTimeField(blank=True, help_text='Reception time', null=True, verbose_name='Time the observation was received')),
                ('co_samples', models.TextField(help_text='CO samples', verbose_name='CO samples data')),
            ],
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interval', models.CharField(choices=[('3h', 'Three hours'), ('daily', 'Daily')], help_text='Interval', max_length=255, verbose_name='Time granularity of the forecast')),
                ('reception_time', models.DateTimeField(blank=True, help_text='Reception time', null=True, verbose_name='Time the observation was received')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name', max_length=255, null=True, verbose_name='Toponym of the place')),
                ('lon', models.FloatField(help_text='Longitude', verbose_name='Longitude of the place')),
                ('lat', models.FloatField(help_text='Latitude', verbose_name='Latitude of the place')),
                ('city_id', models.IntegerField(blank=True, help_text='City ID', null=True, verbose_name='City ID related to the place')),
                ('country', models.CharField(blank=True, help_text='Country', max_length=255, null=True, verbose_name='Country of the place')),
            ],
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reception_time', models.DateTimeField(blank=True, null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_pyowm.Location')),
            ],
        ),
        migrations.CreateModel(
            name='Ozone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_time', models.DateTimeField(help_text='Reference time', verbose_name='Time the observation refers to')),
                ('du_value', models.FloatField(help_text='DU value', verbose_name='Observed ozone Dobson Units')),
                ('interval', models.CharField(choices=[('minute', 'One minute'), ('hour', 'One hour'), ('day', 'One day'), ('month', 'One month'), ('year', 'One year')], max_length=255, verbose_name='Time granularity of the observation')),
                ('reception_time', models.DateTimeField(blank=True, help_text='Reception time', null=True, verbose_name='Time the observation was received')),
                ('location', models.ForeignKey(help_text='Location', on_delete=django.db.models.deletion.CASCADE, to='django_pyowm.Location', verbose_name='Location of the observation')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name', max_length=255, null=True, verbose_name='Name of the meteostation')),
                ('station_id', models.IntegerField(help_text='Station ID', verbose_name='OWM station ID')),
                ('station_type', models.IntegerField(blank=True, help_text='Type', null=True, verbose_name='Meteostation type')),
                ('station_status', models.IntegerField(blank=True, help_text='Status', null=True, verbose_name='Meteostation status')),
                ('lat', models.FloatField(help_text='Latitude', verbose_name='Latitude of the meteostation')),
                ('lon', models.FloatField(help_text='Longitude', verbose_name='Longitude of the meteostation')),
                ('distance', models.FloatField(blank=True, help_text='Distance', null=True, verbose_name='Distance of station from lat/lon of search criteria')),
            ],
        ),
        migrations.CreateModel(
            name='StationHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('station_id', models.IntegerField(help_text='Station ID', verbose_name='OWM station ID')),
                ('interval', models.CharField(choices=[('tick', 'Tick'), ('hour', 'One hour'), ('day', 'One day')], help_text='Interval', max_length=255, verbose_name='Time granularity of the station history')),
                ('reception_time', models.DateTimeField(blank=True, help_text='Reception time', null=True, verbose_name='Time the observation was received')),
                ('measurements', models.TextField(help_text='Measurements', verbose_name='Measured data')),
            ],
        ),
        migrations.CreateModel(
            name='UVIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_time', models.DateTimeField(help_text='Reference time', verbose_name='Time the observation refers to')),
                ('value', models.FloatField(help_text='Value', verbose_name='Observed UV intensity')),
                ('interval', models.CharField(choices=[('minute', 'One minute'), ('hour', 'One hour'), ('day', 'One day'), ('month', 'One month'), ('year', 'One year')], help_text='Interval', max_length=255, verbose_name='Time granularity of the observation')),
                ('reception_time', models.DateTimeField(blank=True, help_text='Reception time', null=True, verbose_name='Time the observation was received')),
                ('location', models.ForeignKey(help_text='Location', on_delete=django.db.models.deletion.CASCADE, to='django_pyowm.Location', verbose_name='Location of the observation')),
            ],
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_time', models.DateTimeField()),
                ('sunrise_time', models.DateTimeField(blank=True, null=True)),
                ('sunset_time', models.DateTimeField(blank=True, null=True)),
                ('clouds', models.PositiveIntegerField(blank=True, null=True)),
                ('rain', models.CharField(blank=True, max_length=255, null=True)),
                ('snow', models.CharField(blank=True, max_length=255, null=True)),
                ('wind', models.CharField(blank=True, max_length=255, null=True)),
                ('humidity', models.PositiveIntegerField(blank=True, null=True)),
                ('pressure', models.CharField(blank=True, max_length=255, null=True)),
                ('temperature', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(max_length=255)),
                ('detailed_status', models.CharField(max_length=255)),
                ('weather_code', models.IntegerField()),
                ('weather_icon_name', models.CharField(blank=True, max_length=255, null=True)),
                ('visibility_distance', models.FloatField(blank=True, null=True)),
                ('dewpoint', models.FloatField(blank=True, null=True)),
                ('humidex', models.FloatField(blank=True, null=True)),
                ('heat_index', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='station',
            name='last_weather',
            field=models.ForeignKey(blank=True, help_text='Last weather', null=True, on_delete=django.db.models.deletion.CASCADE, to='django_pyowm.Weather', verbose_name='Last weather measured by the station'),
        ),
        migrations.AddField(
            model_name='observation',
            name='weather',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_pyowm.Weather'),
        ),
        migrations.AddField(
            model_name='forecast',
            name='location',
            field=models.ForeignKey(help_text='Location', on_delete=django.db.models.deletion.CASCADE, to='django_pyowm.Location', verbose_name='Location of the forecast'),
        ),
        migrations.AddField(
            model_name='forecast',
            name='weathers',
            field=models.ManyToManyField(help_text='Weathers', related_name='forecasts', to='django_pyowm.Weather', verbose_name='Weathers of the forecast'),
        ),
        migrations.AddField(
            model_name='coindex',
            name='location',
            field=models.ForeignKey(help_text='Location', on_delete=django.db.models.deletion.CASCADE, to='django_pyowm.Location', verbose_name='Location of the observation'),
        ),
    ]
